FROM node:latest as build-stage

WORKDIR /app

COPY package*.json /app/

RUN npm install --ci

COPY ./ /app/

RUN npx nx run server:build:render 

FROM docker.io/node:lts-alpine

ENV HOST=0.0.0.0
ENV PORT=3333

ARG DB_HOST
ARG DB_PORT
ARG DB_USERNAME
ARG DB_PASSWORD
ARG DB_NAME
ARG DB_TYPE=postgres
ARG ENV=render

ENV DATABASE_HOST=${DB_HOST}
ENV DATABASE_PORT=${DB_PORT}
ENV DATABASE_USERNAME=${DB_USERNAME}
ENV DATABASE_PASSWORD=${DB_PASSWORD}
ENV DATABASE_NAME=${DB_NAME}
ENV DATABASE_TYPE=${DB_TYPE}
ENV ENVIRONMENT=${ENV}

EXPOSE ${PORT}

RUN addgroup --system server && \
    adduser --system -G server server

WORKDIR /app

COPY --from=build-stage /app/dist/apps/server /app
RUN chown -R server:server .

# install extracted packages from build
RUN npm i --ci --omit=dev

# install extra stuff
RUN npm install reflect-metadata tslib rxjs sqlite3 mysql2 pg

# You can remove this install step if you build with `--bundle` option.
# The bundled output will include external dependencies.
# RUN npm --prefix server --omit=dev -f install

CMD [ "node", "main.js" ]
