######################################################
# deps image, install all needed packages
######################################################
FROM docker.io/node:20-alpine AS deps

WORKDIR /app

# copy repository's root package.json
COPY --chown=node:node package*.json ./

RUN CYPRESS_INSTALL_BINARY=0 npm ci --force

COPY --chown=node:node . .

USER node

######################################################
# builder image, build application
######################################################
FROM docker.io/node:20-alpine AS builder

WORKDIR /app

COPY --chown=node:node package*.json ./

COPY --chown=node:node --from=deps /app/node_modules ./node_modules

COPY --chown=node:node . .

RUN apk add --no-cache tree

RUN npx nx run server:build:render && pwd && tree -I 'node_modules' dist && cp /app/dist/apps/server/package* /app/

# COPY /app/dist/apps/server/package*.json /app/

ENV NODE_ENV production

# install packages from the package.json generated during build
RUN npm i 

# install packages not normally detected at app build time
RUN npm install reflect-metadata tslib rxjs sqlite3 mysql2 pg

USER node

##################################
# final prod image
##################################
FROM docker.io/node:20-alpine AS production

LABEL org.opencontainers.image.title="full-stack-todo nestjs server"
LABEL org.opencontainers.image.url="https://github.com/wgd3/full-stack-todo"
LABEL org.opencontainers.image.source=https://github.com/wgd3/full-stack-todo
LABEL org.opencontainers.image.description="NestJS REST API for the Full Stack To-Do demo application"
LABEL org.opencontainers.image.licenses=MIT

RUN apk add --no-cache dumb-init libc6-compat

ARG DB_HOST
ARG DB_PORT
ARG DB_USERNAME
ARG DB_PASSWORD
ARG DB_NAME
ARG DB_TYPE=sqlite
ARG DB_PATH=fst.sqlite
ARG ENV=render
ARG JWT_SECRET

ENV HOST=0.0.0.0
ENV PORT=3333
ENV DATABASE_HOST=${DB_HOST}
ENV DATABASE_PORT=${DB_PORT}
ENV DATABASE_USERNAME=${DB_USERNAME}
ENV DATABASE_PASSWORD=${DB_PASSWORD}
ENV DATABASE_NAME=${DB_NAME}
ENV DATABASE_TYPE=${DB_TYPE}
ENV DATABASE_PATH=${DB_PATH}
ENV ENVIRONMENT=${ENV}
ENV NODE_ENV production
ENV JWT_SECRET=${JWT_SECRET}

EXPOSE ${PORT}

WORKDIR /app

COPY --chown=node:node --from=builder /app/node_modules ./node_modules

COPY --chown=node:node --from=builder /app/dist/apps/server ./server


CMD [ "dumb-init", "node", "server/main.js" ]
