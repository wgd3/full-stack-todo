######################################################
# Builder image, install all needed packages
######################################################
# Install dependencies only when needed
FROM docker.io/node:lts-alpine AS deps

# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine 
# to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR /usr/src/app
COPY dist/apps/server/package*.json ./

# install extracted deps
RUN npm install --only=production

# install additional deps
RUN npm install reflect-metadata tslib rxjs sqlite3 mysql2 pg

######################################################
# Production image, copy all the files and run nest
######################################################
FROM docker.io/node:lts-alpine AS runner

LABEL org.opencontainers.image.title="full-stack-todo nestjs server"
LABEL org.opencontainers.image.url="https://github.com/wgd3/full-stack-todo"
LABEL org.opencontainers.image.source=https://github.com/wgd3/full-stack-todo
LABEL org.opencontainers.image.description="NestJS REST API for the Full Stack To-Do demo application"
LABEL org.opencontainers.image.licenses=MIT

RUN apk add --no-cache dumb-init

ENV HOST=0.0.0.0
ENV PORT=3333

EXPOSE ${PORT}

WORKDIR /usr/src/app

# pull in packages from builder stage
COPY --from=deps /usr/src/app/node_modules ./node_modules
COPY --from=deps /usr/src/app/package.json ./package.json

# copy local, compiled app
COPY dist/apps/server .
RUN chown -R node:node .
USER node

CMD ["dumb-init", "node", "main.js"]



# This file is generated by Nx.
#
# Build the docker image with `npx nx docker-build server`.
# Tip: Modify "docker-build" options in project.json to change docker build args.
#
# Run the container with `docker run -p 3000:3000 -t server`.
# FROM docker.io/node:lts-alpine

# LABEL org.opencontainers.image.source=https://github.com/wgd3/full-stack-todo
# LABEL org.opencontainers.image.description="NestJS REST API for the Full Stack To-Do demo application"
# LABEL org.opencontainers.image.licenses=MIT

# ENV HOST=0.0.0.0
# ENV PORT=3333

# EXPOSE ${PORT}

# WORKDIR /app

# RUN addgroup --system server && \
#     adduser --system -G server server

# COPY dist/apps/server server
# RUN chown -R server:server .

# RUN npm install reflect-metadata tslib rxjs sqlite3 mysql2 pg

# # You can remove this install step if you build with `--bundle` option.
# # The bundled output will include external dependencies.
# RUN npm --prefix server --omit=dev -f install

# CMD [ "node", "server" ]
